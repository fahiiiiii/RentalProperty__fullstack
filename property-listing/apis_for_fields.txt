#Location Table:
#Rental Property Table 


*Property name,city name,
=>curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/auto-complete?query=The%20Marine' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'
   
data:0:b_max_los_data:
city_ufi:-2611649
**city_name:"Whitstable"**
label:"The Marine, Whitstable, Kent, United Kingdom"
timezone:"Europe/London"
image_url:"https://cf.bstatic.com/xdata/images/hotel/150x150/65513252.jpg?k=358c36937dba9fc6971fc6118d53505caf609775147d75e841e33095334cdae4&o="
roundtrip:"GhAxYTI0NTM1ZTUwOWEwM2NjIAAoATICZW46ClRoZSBNYXJpbmVAAEoAUAA="
type:"ho"
region:"Kent"
dest_type:"hotel"
dest_id:"150008"
latitude:51.364525
hotels:1
longitude:1.0434061
**name:"The Marine"**
rtl:0
nr_hotels:1
country:"United Kingdom"
lc:"en"
cc1:"gb"
id:"eyJjaXR5X25hbWUiOiJXaGl0c3RhYmxlIiwiY291bnRyeSI6IlVuaXRlZCBLaW5nZG9tIiwiZGVzdF9pZCI6IjE1MDAwOCIsImRlc3RfdHlwZSI6ImhvdGVsIn0="




















#Rental Property Table 

*bedroom
from curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/room-list?hotelId=56166&checkinDate=2025-01-09&checkoutDate=2025-01-23&units=metric' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'


data:cancellation_policies:
min_room_distribution:
cc_required:"1"
direct_payment:
cheapest_avail_price_eur:2587.72
payment_detail:
is_exclusive:0
block:0:paymentterms:
is_mobile_deal:0
pod_ios_migrate_policies_to_smp_fullon:0
**number_of_bathrooms:0**
**room_count:4**
all_inclusive:0
babycots_available:0
breakfast_included:0
extrabed_available:0
is_block_fit:1
max_children_free:1
room_name:"Standard Queen Room"
room_surface_in_feet2:247.5699392
is_dormitory:0
is_temp_charge_enabled:0
policy_display_details:
genius_discount_percentage:0
nr_adults:2
is_genius_deal:null
mealplan:"There is no meal option with this room."
half_board:0
dinner_included:0
extrabed_available_amount:null
is_domestic_rate:0
roomtype_id:9
detail_mealplan:
is_last_minute_deal:0
is_flash_deal:0
block_text:
refundable_until:""
pay_in_advance:1
name:"Standard Queen Room"
babycots_available_amount:null
refundable:0
must_reserve_free_parking:0
transactional_policy_data:
children_ages:
package_id:0
nr_children:"0"
deposit_required:1
product_price_breakdown:
can_reserve_free_parking:0
b_bsb_campaigns:
name_without_policy:"Standard Queen Room"
room_surface_in_m2:23
is_smart_deal:0
smoking:0
room_id:5616601
block_id:"5616601_371662184_2_0_0"
lunch_included:0
max_children_free_age:1
max_occupancy:"2"
full_board:0
bh_room_highlights:
1:
2:
3:
4:
preferences:
property_policy_display_details:
prepayment_policies:
duplicate_rates_removed:0
recommended_block_title:"Recommended for 1 adult"
b_blackout_android_prepayment_copy:0
hotel_id:56166
rooms:
use_new_bui_icon_highlight:0
arrival_date:"2025-01-09"
max_rooms_in_reservation:10
b_max_los_data:
room_recommendation:
tax_exceptions:
qualifies_for_no_cc_reservation:0






*room_name,room_count

data:cancellation_policies:
min_room_distribution:
cc_required:"1"
direct_payment:
cheapest_avail_price_eur:2587.72
payment_detail:
is_exclusive:0
block:0:paymentterms:
is_mobile_deal:0
pod_ios_migrate_policies_to_smp_fullon:0
    **number_of_bathrooms:0**
room_count:4
all_inclusive:0
babycots_available:0
breakfast_included:0
extrabed_available:0
is_block_fit:1
max_children_free:1
room_name:"Standard Queen Room"
room_surface_in_feet2:247.5699392
is_dormitory:0
is_temp_charge_enabled:0
policy_display_details:
genius_discount_percentage:0
nr_adults:2
is_genius_deal:null
mealplan:"There is no meal option with this room."
half_board:0
dinner_included:0
extrabed_available_amount:null
is_domestic_rate:0
roomtype_id:9
detail_mealplan:
is_last_minute_deal:0
is_flash_deal:0
block_text:
refundable_until:""
pay_in_advance:1
name:"Standard Queen Room"
babycots_available_amount:null
refundable:0
must_reserve_free_parking:0
transactional_policy_data:
children_ages:
package_id:0
nr_children:"0"
deposit_required:1
product_price_breakdown:
can_reserve_free_parking:0
b_bsb_campaigns:0:
name_without_policy:"Standard Queen Room"
room_surface_in_m2:23
is_smart_deal:0
smoking:0
room_id:5616601
block_id:"5616601_371662184_2_0_0"
lunch_included:0
max_children_free_age:1
max_occupancy:"2"
full_board:0
bh_room_highlights:
1:
room_id:5616622
block_id:"5616622_371662184_2_0_0"
lunch_included:0
smoking:0
max_children_free_age:0
full_board:0
max_occupancy:"2"
bh_room_highlights:
transactional_policy_data:policies:
booking_conditions:
applied_products:
children_ages:
package_id:0
nr_children:"0"
must_reserve_free_parking:0
is_smart_deal:0
deposit_required:1
can_reserve_free_parking:0
product_price_breakdown:
b_bsb_campaigns:
name_without_policy:"Deluxe King Room"
dinner_included:0
nr_adults:2
is_genius_deal:null
mealplan:"There is no meal option with this room."
half_board:0
name:"Deluxe King Room"
pay_in_advance:1
refundable_until:""
babycots_available_amount:null
refundable:0
extrabed_available_amount:null
roomtype_id:9
detail_mealplan:
is_domestic_rate:0
is_flash_deal:0
block_text:
is_last_minute_deal:0
pod_ios_migrate_policies_to_smp_fullon:0
**number_of_bathrooms:0**
all_inclusive:0
room_count:10
paymentterms:
is_mobile_deal:0
max_children_free:0
room_name:"Deluxe King Room"
is_temp_charge_enabled:0
is_dormitory:0
genius_discount_percentage:0
policy_display_details:
babycots_available:0
breakfast_included:0
is_block_fit:1
extrabed_available:0










*Name,type,bedroom ,bathroom,amenities
=>curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/detail?hotelId=56166&checkinDate=2025-01-09&checkoutDate=2025-01-23&units=metric' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'
data:
max_rooms_in_reservation:10
payment_product:"exclusive"
request_to_book_required:""
use_new_bui_icon_highlight:0
class_is_estimated:0
is_preferred_plus:0
recommended_block_title:"Recommended for 1 adult"
is_single_unit_vr:1
composite_price_breakdown:
direct_payment:
qualifies_for_no_cc_reservation:0
is_cpv2_property:1
arrival_date:"2025-01-09"
booking_home:
rare_find_state:"NOT_RARE"
check_only_x_left:1
hotel_facilities:"160,485,161,47,109,467,450,468,163,96,2,108,449,107,466,454,46,484,486"
min_room_distribution:
is_family_friendly:0
available_rooms:1
district:""
property_highlight_strip_saba:
b_legal_use_neutral_color_for_persuasion_legal:0
cc_required:"1"
wl_dest_id:"city::-575853"
spoken_languages:
rooms:1317108901:
description:"Guests will have a special experience as the villa features a fireplace. In the fully equipped kitchen, guests will find a stovetop, a refrigerator, a dishwasher and kitchenware. The air-conditioned villa provides a flat-screen TV, a washing machine, a private entrance, a tea and coffee maker as well as garden views. The unit offers 4 beds."
private_bathroom_highlight:
has_highlight:0
children_and_beds_text:
highlights:
facilities:
bed_configurations:0:
    **private_bathroom_count:0**->bathroom
apartment_configuration:
photos:
longitude:-78.97674
ufi:-575853
room_recommendation:
address_required:0
mobile_discount_percentage:10
total_blocks:2
host_since:null
b_blackout_android_prepayment_copy:0
payment_detail:
**block_count:2**
address_trans:""
is_crimea:0
is_city_center:null
family_facilities:
timezone:"America/Toronto"
is_damage_deposit_by_booking:1
is_preferred:0
aggregated_data:
tax_exceptions:
is_closed:0
seen_cc_app_hp_missing_info:0
default_wishlist_name:"Whitby"
city_name_en:"Whitby"
accommodation_type:213
hotel_include_breakfast:0
facilities_block:
type:"popular"
name:"Most Popular Facilities"
facilities:0:
    **name:"Free Wifi"**->amenities
icon:"wifi"
1:
icon:"parking_sign"
   **name:"Free parking"**->amenities
2:
3:
languages_spoken:
countrycode:"ca"
cvc_required:"1"
block:
cc1:"ca"
zip:"L1P 0H9"
currency_code:"CAD"
city_in_trans:"in Whitby"
distance_to_cc:3.65931388385069
only_x_left:
plq_sensitivity:""
    **hotel_id:13171089** the previously dest_id will be used here 
country_trans:"Canada"
seen_cc_app_rp_missing_fac:0
is_tpi_exclusive_property:0
departure_date:"2025-01-23"
city_trans:"Whitby"
is_hotel_ctrip:0
host_profile:null
property_highlight_strip:
preferences:
soldout:0
b_max_los_data:
cant_book:0
property_policy_display_details:
breakfast_review_score:
    **accommodation_type_name:"Villas"**->type 
host_name:
    **hotel_name:"Vacational amenities"**
url:"https://www.booking.com/hotel/ca/vacational-amenities.html"
b_sca_flow_property_user_ip:0
district_id:0
hotel_address_line:"27 Windflower Way, L1P 0H9 Whitby, Canada"
last_reservation:
is_eligible_for_horizontal_scroll:1
urgency_room_string:"Two-Bedroom Villa"
hotel_text:
address:"27 Windflower Way"
review_nr:2
city:"Whitby"
districts:
default_language:"en-gb"





















#Property Details Table 

*description
=>from 
    curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/get-description?hotelId=2291137' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'

data:0:
descriptiontype_id:6
    **description:"Located in Downtown Manhattan, 
    the Hilton Garden Inn NYC Financial Center/Manhattan 
    Downtown is 1585 feet from Wall Street and the 
    Charging Bull. Battery Park is 528 feet away. 
    Each room in this Manhattan hotel features a TV, a mini-refrigerator, 
    a coffee maker and a laptop -sized safe. 
    Desks are also provided. Guests at this Hilton Garden Inn
     will be able to enjoy breakfast, lunch 
     and dinner at the Garden Grille & Bar. The Pavilion Pantry is the onsite 
     24-hour convenience store. Guests will also have access to the 24-hour fitness center and 24-hour business center. The Bowling Green subway station is 1056 feet away while the South Ferry subway station 
     is 394 feet away. Newark International Airport is 16 mi from the property."**->description
languagecode:"xu"
1:
description:"Minimum check-in age is 21. A $50 per day incidental hold is taken at check-in."
extra_lines:
descriptiontype_id:7
languagecode:"xu"
status:true
message:"Successful"





*images

=>from
    curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/get-photos?hotelId=2291137' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'

data:
__typename:"hoteldescriptionphotosResults"
data:2291137:0:
0:1
1:
2:484656765
3:0:
id:3
tag:"Property building"
1:
id:1000000001
tag:"Property"
**4:->images by type
    0:"/xdata/images/hotel/square60/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    1:"/xdata/images/hotel/max1024x768/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    2:"/xdata/images/hotel/max100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    3:"/xdata/images/hotel/max200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    4:"/xdata/images/hotel/max300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    5:"/xdata/images/hotel/max400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    6:"/xdata/images/hotel/max500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    7:"/xdata/images/hotel/max600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    8:"/xdata/images/hotel/max700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    9:"/xdata/images/hotel/max800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    10:"/xdata/images/hotel/max900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    11:"/xdata/images/hotel/max1000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    12:"/xdata/images/hotel/max1100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    13:"/xdata/images/hotel/max1200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    14:"/xdata/images/hotel/max1300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    15:"/xdata/images/hotel/max1400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    16:"/xdata/images/hotel/max1500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    17:"/xdata/images/hotel/max1600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    18:"/xdata/images/hotel/max1700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    19:"/xdata/images/hotel/max1800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    20:"/xdata/images/hotel/max1900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    21:"/xdata/images/hotel/max2000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    22:"/xdata/images/hotel/max2100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    23:"/xdata/images/hotel/max2200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    24:"/xdata/images/hotel/max2300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    25:"/xdata/images/hotel/max2400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    26:"/xdata/images/hotel/max2500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    27:"/xdata/images/hotel/max2600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    28:"/xdata/images/hotel/max2700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    29:"/xdata/images/hotel/max2800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    30:"/xdata/images/hotel/max2900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    31:"/xdata/images/hotel/max3000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
1:





















----------------------------
can you please make another function for fetching images for each destId as well as hotelId:from this api (the stored destId will be the input of hotelId in that api

*images

=>from
    curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/get-photos?hotelId=2291137' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'

data:
__typename:"hoteldescriptionphotosResults"
data:2291137:0:
0:1
1:
2:484656765
3:0:
id:3
tag:"Property building"
1:
id:1000000001
tag:"Property"
**4:->images by type
    0:"/xdata/images/hotel/square60/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    1:"/xdata/images/hotel/max1024x768/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    2:"/xdata/images/hotel/max100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    3:"/xdata/images/hotel/max200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    4:"/xdata/images/hotel/max300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    5:"/xdata/images/hotel/max400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    6:"/xdata/images/hotel/max500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    7:"/xdata/images/hotel/max600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    8:"/xdata/images/hotel/max700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    9:"/xdata/images/hotel/max800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    10:"/xdata/images/hotel/max900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    11:"/xdata/images/hotel/max1000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    12:"/xdata/images/hotel/max1100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    13:"/xdata/images/hotel/max1200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    14:"/xdata/images/hotel/max1300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    15:"/xdata/images/hotel/max1400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    16:"/xdata/images/hotel/max1500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    17:"/xdata/images/hotel/max1600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    18:"/xdata/images/hotel/max1700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    19:"/xdata/images/hotel/max1800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    20:"/xdata/images/hotel/max1900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    21:"/xdata/images/hotel/max2000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    22:"/xdata/images/hotel/max2100/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    23:"/xdata/images/hotel/max2200/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    24:"/xdata/images/hotel/max2300/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    25:"/xdata/images/hotel/max2400/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    26:"/xdata/images/hotel/max2500/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    27:"/xdata/images/hotel/max2600/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    28:"/xdata/images/hotel/max2700/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    29:"/xdata/images/hotel/max2800/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    30:"/xdata/images/hotel/max2900/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
    31:"/xdata/images/hotel/max3000/484656765.jpg?k=aaa04cb98edd1c367ceb4bca7b73867d501154a2ea4f3ef39a3ddcfeeb1e8fe8&o="
1:








ChatGPT said:
ChatGPT
To fetch images for each destId (which you mentioned will be used as hotelId in the API), we can create a new function in your BookingController to handle the API request to fetch the images.

Here’s how you can structure this function based on the provided curl example and the data format:

Step 1: Define a Model for Image Data
First, let's define the necessary data structures to hold the image URLs.

go
Copy code
// Image represents an image associated with a hotel
type Image struct {
    ID     int    `json:"id"`
    Tag    string `json:"tag"`
    URLs   []string `json:"urls"` // List of image URLs
}
Step 2: Create a Method to Fetch Hotel Images
This method will take a hotelId and make an API request to get the images for that hotel. We will use the net/http package to make the GET request and parse the response.

go
Copy code
// FetchHotelImages fetches images for a given hotelId
func (c *BookingController) FetchHotelImages(hotelID string) ([]Image, error) {
    // Construct the API URL for fetching hotel images
    url := fmt.Sprintf("https://booking-com18.p.rapidapi.com/stays/get-photos?hotelId=%s", hotelID)

    // Make the GET request
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, fmt.Errorf("error creating request: %v", err)
    }

    // Set the headers
    req.Header.Add("x-rapidapi-host", "booking-com18.p.rapidapi.com")
    req.Header.Add("x-rapidapi-key", "3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec")

    // Execute the request
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error making API request: %v", err)
    }
    defer resp.Body.Close()

    // Parse the response body
    var apiResponse struct {
        Data map[string][]struct {
            ID   int    `json:"id"`
            Tag  string `json:"tag"`
            Images []struct {
                URL string `json:"url"`
            } `json:"images"`
        } `json:"data"`
    }

    // Decode the response body into the struct
    if err := json.NewDecoder(resp.Body).Decode(&apiResponse); err != nil {
        return nil, fmt.Errorf("error decoding response: %v", err)
    }

    // Collect image data
    var images []Image
    for _, imageData := range apiResponse.Data {
        var imageURLs []string
        for _, img := range imageData.Images {
            imageURLs = append(imageURLs, img.URL)
        }
        images = append(images, Image{
            ID:   imageData.ID,
            Tag:  imageData.Tag,
            URLs: imageURLs,
        })
    }

    return images, nil
}
Step 3: Use the Function to Fetch Images for Each Hotel
Now, you can loop over your destIds (or hotelIds) and use this function to fetch images.

For example, in your ProcessAllHotelDescriptions function, you can fetch and store the images like this:

go
Copy code
// Process all hotel descriptions and fetch images
func (c *BookingController) ProcessAllHotelDescriptions() error {
    log.Println("Starting to process hotel descriptions and images...")

    c.mutex.Lock()
    var allDestIds []string
    processedIds := make(map[string]bool)

    // Collect all unique destIds from each city
    for city, properties := range c.cityProperties {
        log.Printf("Processing properties for city: %s", city)
        for _, propID := range properties {
            if !processedIds[propID] {
                allDestIds = append(allDestIds, propID)
                processedIds[propID] = true
            }
        }
    }
    c.mutex.Unlock()

    log.Printf("Found %d unique hotels to process", len(allDestIds))

    // Create a channel to store results
    results := make(chan *models.HotelDetails, len(allDestIds))
    var wg sync.WaitGroup

    // Create semaphore for rate limiting
    semaphore := make(chan struct{}, 1) // Process one request at a time

    // Process each destId
    for _, destID := range allDestIds {
        wg.Add(1)
        go func(id string) {
            defer wg.Done()

            // Acquire semaphore
            semaphore <- struct{}{}
            defer func() { <-semaphore }()

            // Wait for rate limiter
            err := c.rateLimiter.Wait(context.Background())
            if err != nil {
                log.Printf("Rate limiter error for hotel %s: %v", id, err)
                return
            }

            details, err := c.fetchHotelDescriptionFromAPI(id)
            if err != nil {
                log.Printf("Error fetching description for hotel %s: %v", id, err)
                return
            }

            // Fetch hotel images
            images, err := c.FetchHotelImages(id)
            if err != nil {
                log.Printf("Error fetching images for hotel %s: %v", id, err)
                return
            }

            details.Images = images // Add images to hotel details

            results <- details
        }(destID)
    }

    // Close results channel when all goroutines are done
    go func() {
        wg.Wait()
        close(results)
    }()

    // Collect and store results
    hotelDescriptions := make(map[string]*models.HotelDetails)
    for detail := range results {
        if detail != nil {
            hotelDescriptions[detail.HotelID] = detail
            log.Printf("Successfully processed hotel: %s - %s", detail.HotelID, detail.PropertyName)
        }
    }

    // Save results to file
    outputData, err := json.MarshalIndent(hotelDescriptions, "", "    ")
    if err != nil {
        return fmt.Errorf("error marshaling hotel descriptions: %v", err)
    }

    err = os.WriteFile("hotel_descriptions_with_images.json", outputData, 0644)
    if err != nil {
        return fmt.Errorf("error saving hotel descriptions to file: %v", err)
    }

    log.Printf("Successfully processed and saved descriptions and images for %d hotels", len(hotelDescriptions))
    return nil
}
Explanation of Changes:
FetchHotelImages:

Fetches the images for a given hotel by making a GET request to the booking-com18.p.rapidapi.com API.
It returns a list of images, each with its ID, Tag, and URLs (array of different sizes of images).
Modifying ProcessAllHotelDescriptions:

Inside the loop, after fetching hotel descriptions, the FetchHotelImages function is called to retrieve and associate images with the hotel.
The images are added to the HotelDetails structure.
Saving Output:

The output is saved in hotel_descriptions_with_images.json to include both descriptions and images for each hotel.
This approach integrates both hotel descriptions and images into the result. Let me know if you'd like further adjustments!






You said:
isnt need struct for that function
?

2/2

ChatGPT said:
ChatGPT
Yes, you're absolutely right! We need to define a struct for the response that we will be getting from the API in the FetchHotelImages function. This struct will map to the expected JSON structure of the response, so that we can properly decode and access the data.

Here's how the structure for the API response can be defined:
go
Copy code
// Image represents a single image associated with a hotel
type Image struct {
    URL string `json:"url"`  // Image URL in various resolutions
}

// HotelImagesResponse represents the structure of the API response for fetching hotel images
type HotelImagesResponse struct {
    Data map[string][]struct {
        ID     int    `json:"id"`
        Tag    string `json:"tag"`
        Images []Image `json:"images"` // List of images with URLs
    } `json:"data"`
}
Adjust the FetchHotelImages function with the struct:
go
Copy code
// FetchHotelImages fetches images for a given hotelId
func (c *BookingController) FetchHotelImages(hotelID string) ([]Image, error) {
    // Construct the API URL for fetching hotel images
    url := fmt.Sprintf("https://booking-com18.p.rapidapi.com/stays/get-photos?hotelId=%s", hotelID)

    // Make the GET request
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, fmt.Errorf("error creating request: %v", err)
    }

    // Set the headers
    req.Header.Add("x-rapidapi-host", "booking-com18.p.rapidapi.com")
    req.Header.Add("x-rapidapi-key", "3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec")

    // Execute the request
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error making API request: %v", err)
    }
    defer resp.Body.Close()

    // Parse the response body into the struct
    var apiResponse HotelImagesResponse

    // Decode the response body
    if err := json.NewDecoder(resp.Body).Decode(&apiResponse); err != nil {
        return nil, fmt.Errorf("error decoding response: %v", err)
    }

    // Collect image data
    var images []Image
    for _, imageData := range apiResponse.Data {
        for _, img := range imageData.Images {
            images = append(images, img)
        }
    }

    return images, nil
}
Explanation of Changes:
HotelImagesResponse struct: This struct reflects the structure of the response JSON you shared. It includes an inner struct for each hotel's image data, which has an ID, Tag, and a list of Image objects (holding the URLs).

Image struct: This struct holds the URL of each image, representing the image in different sizes.

Decoding the JSON: We're using json.NewDecoder().Decode(&apiResponse) to decode the response into the HotelImagesResponse struct.

Returning Images: After parsing the response, we loop through the Data map and append each Image to the final images slice, which is returned to the caller.

By using this struct, we ensure that the data is mapped correctly and we can work with the parsed response from the API. Let me know if this helps!






You said:
can you please make another function for fetching rating reviews for each destId as well as hotelId:from this api (the stored destId will be the input of hotelId in that api

*Rating
=>from curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/review-featured?hotelId=6162805' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'
    
    
    data:
    featured_reviews_title:"Guests who stayed here loved"
    vpm_favorable_review_count:2652
    vpm_featured_reviews:0:relative_time:
    id:5119255650
    date:"2025-01-07 03:07:28"
    title:"Excellent"
    pros:"Staff was really helpful and polite. Rooms very clean and big enough, amazing view. Proximity to core NYC."
    review_id:5119255650
    cons:"Bathroom door is not really a door, it is a sliding &quot;wardrobe door&quot; which really does not provide enough privacy. Also, for a family room there was only one pod for one coffee in the room."
    languagecode:"xu"
    travel_purpose:"leisure"
    stay_status:"stayed"
    author:
    **average_score_out_of_10:9**

*Review count:
=>from curl --request GET \
	--url 'https://booking-com18.p.rapidapi.com/stays/review-featured?hotelId=6162805' \
	--header 'x-rapidapi-host: booking-com18.p.rapidapi.com' \
	--header 'x-rapidapi-key: 3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec'
    
    
    data:
    featured_reviews_title:"Guests who stayed here loved"
    **vpm_favorable_review_count:2652**
    vpm_featured_reviews:0:relative_time:
    id:5119255650
    date:"2025-01-07 03:07:28"
    title:"Excellent"
    pros:"Staff was really helpful and polite. Rooms very clean and big enough, amazing view. Proximity to core NYC."
    review_id:5119255650
    cons:"Bathroom door is not really a door, it is a sliding &quot;wardrobe door&quot; which really does not provide enough privacy. Also, for a family room there was only one pod for one coffee in the room."
    languagecode:"xu"
    travel_purpose:"leisure"
    stay_status:"stayed"
    author:
    average_score_out_of_10:9

ChatGPT said:
ChatGPT
To fetch the ratings and reviews for each hotel using the provided API, we will need to define a function similar to the one used for fetching hotel images. We will also define the appropriate struct to parse the response from the API.

Here's how we can do that:

Define the Structs for the Rating and Review Response
go
Copy code
// Review represents a single review for a hotel
type Review struct {
    ReviewID             int    `json:"review_id"`
    Title                string `json:"title"`
    Pros                 string `json:"pros"`
    Cons                 string `json:"cons"`
    Date                 string `json:"date"`
    LanguageCode         string `json:"languagecode"`
    TravelPurpose        string `json:"travel_purpose"`
    StayStatus           string `json:"stay_status"`
    AverageScoreOutOf10  float64 `json:"average_score_out_of_10"`
}

// HotelReviewResponse represents the structure of the API response for fetching hotel reviews
type HotelReviewResponse struct {
    FeaturedReviewsTitle  string   `json:"featured_reviews_title"`
    VPMFavorableReviewCount int    `json:"vpm_favorable_review_count"`
    FeaturedReviews       []Review `json:"vpm_featured_reviews"`
}
Create the Function to Fetch Hotel Reviews
go
Copy code
// FetchHotelReviews fetches the reviews for a given hotelId
func (c *BookingController) FetchHotelReviews(hotelID string) (*HotelReviewResponse, error) {
    // Construct the API URL for fetching hotel reviews
    url := fmt.Sprintf("https://booking-com18.p.rapidapi.com/stays/review-featured?hotelId=%s", hotelID)

    // Make the GET request
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, fmt.Errorf("error creating request: %v", err)
    }

    // Set the headers
    req.Header.Add("x-rapidapi-host", "booking-com18.p.rapidapi.com")
    req.Header.Add("x-rapidapi-key", "3426928f2amsh2e4d4b598c36eefp10e72ajsn894381081bec")

    // Execute the request
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, fmt.Errorf("error making API request: %v", err)
    }
    defer resp.Body.Close()

    // Parse the response body into the struct
    var apiResponse HotelReviewResponse

    // Decode the response body
    if err := json.NewDecoder(resp.Body).Decode(&apiResponse); err != nil {
        return nil, fmt.Errorf("error decoding response: %v", err)
    }

    return &apiResponse, nil
}
Explanation:
Review struct: This struct holds individual review details such as the review ID, title, pros, cons, date, and score.

HotelReviewResponse struct: This struct is used to hold the entire response from the API. It contains the FeaturedReviewsTitle, VPMFavorableReviewCount, and the FeaturedReviews array, which holds all the individual Review items.

FetchHotelReviews function:

It accepts the hotelID as input.
Makes an HTTP GET request to the API with the appropriate headers.
Decodes the response into the HotelReviewResponse struct.
Returns the parsed reviews data.
Example Usage
You can call this function within your application like this:

go
Copy code
// Assuming c is your controller
hotelID := "6162805"  // Replace with the actual hotel ID
reviews, err := c.FetchHotelReviews(hotelID)
if err != nil {
    log.Printf("Error fetching reviews for hotel %s: %v", hotelID, err)
    return
}

// Use the reviews data
log.Printf("Found %d reviews for hotel %s", len(reviews.FeaturedReviews), hotelID)
This should fetch the reviews for the hotel and provide them to your application in a structured format. Let me know if you need further modifications or explanations!






